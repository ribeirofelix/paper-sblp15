#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
We specify below the behavior of toAST() and compile() by using the formalizatio
n of a subset of Lua semantics, as presented (as Lua Core) in 
\begin_inset CommandInset citation
LatexCommand cite
key "terra"

\end_inset

.
 This subset depicts the notions of lexical scoping, closures and side-effects
 and is therefore sufficient for our purposes.
 We extend the Lua Core specification from 
\begin_inset CommandInset citation
LatexCommand cite
key "terra"

\end_inset

 with a general 
\begin_inset Quotes eld
\end_inset

binary operator
\begin_inset Quotes erd
\end_inset

 expression, mimicking Lua operators supported by LuaToAST.
\end_layout

\begin_layout Standard
Lua Core syntax is presented as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
e=b\,|\, x\,|\,\mbox{let \ensuremath{x=e}\, in\,\ensuremath{e}}\,|\, x\coloneqq e\,|\, e(e)\,|\,\mbox{fun}(x)\{e\}\,|\, e\mbox{ op }e\,|\,\mbox{toAST}(e)\,|\,\mbox{compile}(a)
\]

\end_inset


\end_layout

\begin_layout Standard
Lua expressions can be base values (
\begin_inset Formula $b$
\end_inset

), variables (
\begin_inset Formula $x$
\end_inset

), a scoped variable definition (
\begin_inset Formula $\mbox{let \ensuremath{x=e}\, in\,\ensuremath{e}}$
\end_inset

, with 
\begin_inset Formula $e;e$
\end_inset

 as sugar for 
\begin_inset Formula $\mbox{let \ensuremath{\_=e}\, in\,\ensuremath{e}}$
\end_inset

), a variable assignment (
\begin_inset Formula $x\coloneqq e$
\end_inset

), an application (
\begin_inset Formula $e(e)$
\end_inset

), a function definition (
\begin_inset Formula $\mbox{fun}(x)\{e\}$
\end_inset

) or an operation on expressions (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $e\mbox{ op }e$
\end_inset

, with semantics defined by a function 
\begin_inset Formula $Op$
\end_inset

).
 We extend this by adding operations toAST(
\begin_inset Formula $e$
\end_inset

) and compile(
\begin_inset Formula $a$
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v=b\,|\,\left\langle \Gamma,x,e\right\rangle \,|\, a
\]

\end_inset


\end_layout

\begin_layout Standard
Lua values can be base values (
\begin_inset Formula $b$
\end_inset

), closures (
\begin_inset Formula $\left\langle \Gamma,x,e\right\rangle $
\end_inset

) or Lua ASTs (
\begin_inset Formula $a$
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
a=[\mbox{base \ensuremath{b}}]\,|\,[\mbox{closure }\left\langle \Gamma,x,e\right\rangle ]\,|\,[\mbox{op\,\ensuremath{a}\,\ensuremath{a}}]
\]

\end_inset


\end_layout

\begin_layout Standard
A Lua AST may contain nodes that wrap base values
\emph on
 
\emph default
(
\begin_inset Formula $[\mbox{base }b]$
\end_inset


\emph on
), 
\emph default
closures (
\begin_inset Formula $[\mbox{closure }\left\langle \Gamma,x,e\right\rangle ]$
\end_inset

) and operations (
\begin_inset Formula $[\mbox{op}\, a\, a]$
\end_inset

).
\end_layout

\begin_layout Standard
The rules for evaluating Lua expressions over an environment 
\begin_inset Formula $\Sigma$
\end_inset

, which is a tuple 
\begin_inset Formula $(\Gamma,S)$
\end_inset

 containing a namespace 
\begin_inset Formula $\Gamma:x\rightarrow p$
\end_inset

 and a store 
\begin_inset Formula $S:p\rightarrow v$
\end_inset

 (where 
\begin_inset Formula $p$
\end_inset

 are memory positions) are as follows.
 We use 
\begin_inset Formula $\rightarrow$
\end_inset

 instead of 
\begin_inset Formula $\overset{L}{\rightarrow}$
\end_inset

 as in 
\begin_inset CommandInset citation
LatexCommand cite
key "terra"

\end_inset

; where rules have the same names, they have the same semantics as those
 presented in that work.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v,\Sigma\rightarrow v,\Sigma\textsc{ (LVal)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\Sigma=(\Gamma,S)}{x,\Sigma\rightarrow S(\Gamma(x)),\Sigma}\textsc{ (LVar)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\begin{array}[t]{c}
e_{1},\Sigma_{1}\rightarrow v_{1},(\Gamma_{2},S_{2})\\
p\,\mbox{fresh}\,\,\,\,\,\,\,\,\,\, e_{2},(\Gamma_{2}[x\leftarrow p],S_{2}[p\leftarrow v_{1}])\rightarrow v_{2},(\Gamma_{3},S_{3})
\end{array}}{\mbox{let \ensuremath{x=e_{1}}\, in\,\ensuremath{e_{2}}},\Sigma_{1}\rightarrow v_{2},(\Gamma_{2},S_{3})}\textsc{ (LLet)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\begin{array}[t]{c}
e_{1},\Sigma_{1}\rightarrow\left\langle \Gamma_{1},x,e_{3}\right\rangle ,\Sigma_{2}\,\,\,\,\,\,\,\,\,\, e_{2},\Sigma_{2}\rightarrow v_{1},(\Gamma_{3},S_{3})\\
\mbox{\ensuremath{p}\,\ fresh}\,\,\,\,\,\,\,\,\,\, e_{3},(\Gamma_{1}[x\leftarrow p],S_{3}[p\leftarrow v_{1}])\rightarrow v_{2},(\Gamma_{4},S_{4})
\end{array}}{e_{1}(e_{2}),\Sigma_{1}\rightarrow v_{2},(\Gamma_{3},S_{4})}\textsc{ (LApp)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{e_{1},\Sigma_{1}\rightarrow v_{1},(\Gamma,S)\,\,\,\,\,\,\,\,\,\,\Gamma(x)=p}{x\coloneqq e,\Sigma\rightarrow v,(\Gamma,S[p\leftarrow v])}\textsc{ (LAsn)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\Sigma=(\Gamma,S)}{\mbox{fun(\ensuremath{x})\{\ensuremath{e}\}},\Sigma\rightarrow\left\langle \Gamma,x,e\right\rangle ,\Sigma}\textsc{ (LFun)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{e_{1},\Sigma_{1}\rightarrow v_{1},\Sigma_{2}\,\,\,\,\,\,\,\,\,\, e_{2},\Sigma_{2}\rightarrow v_{2},\Sigma_{3}\,\,\,\,\,\,\,\,\,\, v_{3}=Op(v_{1},v_{2})}{e_{1}+e_{2},\Sigma_{1}\rightarrow v_{3},\Sigma_{3}}\textsc{ (LOp)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{e_{1},\Sigma\rightarrow\left\langle \Gamma,x,e_{2}\right\rangle ,\Sigma\,\,\,\,\,\,\,\,\,\, e_{2},\Sigma\overset{D}{\rightarrow}a_{1}}{\mbox{toAST(\ensuremath{e_{1}})},\Sigma\rightarrow a_{1},\Sigma}\textsc{ (LAst)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\Sigma=(\Gamma,S)\,\,\,\,\,\,\,\,\,\, a_{1},\Sigma\overset{C}{\rightarrow}e_{1}}{\mbox{compile(\ensuremath{a_{1}})},\Sigma\rightarrow\left\langle \Gamma,\_,e_{1}\right\rangle ,\Sigma}\textsc{ (LComp)}
\]

\end_inset


\end_layout

\begin_layout Standard
The rules for decompiling Lua expressions (
\begin_inset Formula $\overset{D}{\rightarrow}$
\end_inset

) over an environment 
\begin_inset Formula $\Sigma$
\end_inset

 are the following:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
b,\Sigma\overset{D}{\rightarrow}[\mbox{base }b]\textsc{ (DBase)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\Sigma=(\Gamma,S,F)}{x,\Sigma\overset{D}{\rightarrow}[\mbox{closure }\left\langle \Gamma,\_,x\right\rangle ]}\textsc{ (DVar)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{e_{1},\Sigma\overset{D}{\rightarrow}a_{1}\,\,\,\,\,\,\,\,\,\, e_{2},\Sigma\overset{D}{\rightarrow}a_{2}}{e_{1}\mbox{ op }e_{2},\Sigma\overset{D}{\rightarrow}[\mbox{op\,\ensuremath{a_{1}\,}\ensuremath{a_{2}}}]}\textsc{ (DOp)}
\]

\end_inset


\end_layout

\begin_layout Standard
Note that 
\begin_inset Formula $\overset{D}{\rightarrow}$
\end_inset

 is defined only for variables, base values and the operator, mirroring
 the implementation of LuaToAST.
 
\end_layout

\begin_layout Standard
Finally, the rules for compiling Lua ASTs (
\begin_inset Formula $\overset{C}{\rightarrow}$
\end_inset

) over an environment 
\begin_inset Formula $\Sigma$
\end_inset

 are:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
[\mbox{base \ensuremath{b}}],\Sigma\overset{C}{\rightarrow}b,\Sigma\textsc{ (CBase)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\Sigma=(\Gamma,S)\,\,\,\,\,\,\,\,\,\, e_{1},(\Gamma_{1},S)\rightarrow v_{1},\Sigma_{2}}{[\mbox{closure }\left\langle \Gamma_{1},\_,e_{1}\right\rangle ],\Sigma\overset{C}{\rightarrow}v_{1}}\textsc{ (CVar)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{a_{1},\Sigma\overset{C}{\rightarrow}e_{1}\,\,\,\,\,\,\,\,\,\, a_{2},\Sigma\overset{C}{\rightarrow}e_{2}}{[\mbox{op\,\ensuremath{a_{1}}\ensuremath{\, a_{2}}}],\Sigma\overset{C}{\rightarrow}e_{1}\mbox{ op }e_{2}}\textsc{ (COp)}
\]

\end_inset


\end_layout

\begin_layout Standard
The evaluation of variables 
\begin_inset Formula $x$
\end_inset

 happens only at compilation time, as evidenced by the evaluation of 
\begin_inset Formula $e_{1}$
\end_inset

 using 
\begin_inset Formula $\rightarrow$
\end_inset

 in rule 
\shape smallcaps
CVar
\shape default
.
 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "terra"

\end_inset

DeVito et al.
 
\begin_inset Quotes erd
\end_inset

Terra: a multi-stage language for high-performance computing
\begin_inset Quotes erd
\end_inset

 PLDI'13.
\end_layout

\end_body
\end_document
